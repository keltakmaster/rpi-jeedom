= JSON RPC API 

Das ist eine Dokumentation (die sich entwickeln wird) für die Arbeitsweise der APIs. Zuallererst hier sind die Spezifizierungen  (JSON RPC 2.0) : http://www.jsonrpc.org/specification

Der Zugriff auf das API ist über die URL : #URL_JEEDOM#/core/api/jeeApi.php möglich

== Divers

=== ping

Retourne pong, permet de tester la communication avec Jeedom

=== Version

Gibt die Jeedom Version zurück

=== datetime

Gibt die Jeedom Version zurück

== JSON Event API

=== event::changes 

Retourne la liste des changements depuis le datetime passé en paramètre (doit être en microsecondes). Vous aurez aussi dans la réponse le datetime courant de Jeedom (à réutiliser pour l'interrogation suivante)

Parameter :

- int datetime

== JSON Plugin API

=== plugin::listPlugin
Gibt die Liste aller Plugins zurück

Parameter :

- int activateOnly = 0 (liefert nur die Liste der aktivierten Plugins)
- int orderByCaterogy = 0 (retourne la liste des plugins triés par catégorie)


== API JSON Objet

=== object::all
Gibt die Liste aller Objekte zurück 

=== object::full
Liefert eine Liste aller Objekte, mit allen Geräten für jedes Objekt und alle Befehle von jedem Gerät, sowie die Zustände von diesem (für Befehle des Info Typs)

=== object::byId
Gibt das angegebenen Objekt zurück

Parameter :

- int id

=== object::fullById
Gibt ein Objekt zurück, seine Geräte und für jedes Gerät alle seine Befehle und die Zustände

== JSON Summary API

=== summary::global
Gibt eine gesamt Zusammenfassung der Parameter des übergebenen Schlüssels zurück

Parameter :

- string key : (optionnel), clef du résumé voulu, si vide alors Jeedom vous renvoi le résumé pour toute les clefs

=== summary::byId
Retourne le résumé pour l'objet id

Parameter :

- int id : id de l'objet
- string key : (optionnel), clef du résumé voulu, si vide alors Jeedom vous renvoi le résumé pour toute les clefs

== JSON EqLogic API 
=== eqLogic::all
Gibt die Liste aller Geräte zurück

=== eqLogic::fullById
Gibt ein Gerät sowie dessen Befehle und die Zustände zurück (für Befehle des Info Typs)

=== eqLogic::byId
Liefert das angegebene Gerät zurück

Parameter :

- int id

=== eqLogic::byType

Gibt alle zum genau angegebenen Typ (plugin) gehörenden Geräte zurück

Parameter :

- string type

=== eqLogic::byObjectId
Retourne tous les équipements appartenant à l'objet spécifié

Parameter :

- int object_id

=== eqLogic::byTypeAndId
Renvoi un tableau d'équipement en fonction des paramètres. Le retour sera de la forme array('eqType1' =>array( 'id'=>...,'cmds' => array(....)),'eqType2' =>array( 'id'=>...,'cmds' => array(....))....,id1 => array( 'id'=>...,'cmds' => array(....)),id2 => array( 'id'=>...,'cmds' => array(....))..)

Parameter :

- string[] eqType = tableau des types d'équipements voulus
- int[] id = tableau des ID d'équipements personnalisés voulus

=== eqLogic::save
Retourne l'équipement enregistré/créé

Parameter :

- int id (vide si c'est une création)
- string eqType_name (type de l'équipement script, virtuel...)
- string $name
- string $logicalId = <nowiki>''</nowiki>
- int $object_id = null
- int $eqReal_id = null;
- int $isVisible = 0;
- int $isEnable = 0;
- array $configuration;
- int $timeout;
- array $category;

== API JSON Cmd

=== cmd::all
Gibt die Liste aller Befehle zurück

=== cmd::byId
Liefert den angegebenen Befehl zurück

Parameter :

- int id

=== cmd::byEqLogicId
Gibt alle zum angegebenen Gerät gehörenden Befehle zurück

Parameter :

- int eqLogic_id

=== cmd::execCmd
Führt den angegebenen Befehl aus

Parameter :

- int id
- [options] Liste des options de la commande (dépend du type et du sous-type de la commande)

=== cmd::getStatistique
Gibt Statistiken über den Befehl zurück (funktioniert nur Befehle vom Info Typ und historisiert)

Parameter :

- int id
- string startTime : date de début de calcul des statistiques
- string endTime : date de fin de calcul des statistiques

=== cmd::getTendance
Gibt die Tendenz über den Befehl zurück (funktioniert nur mit Befehle vom Typ Info und Chronik)

Parameter :

- int id
- string startTime : date de début de calcul de la tendance
- string endTime : date de fin de calcul de la tendance

=== cmd::getHistory
Retourne l'historique de la commande (ne marche que sur les commandes de type info et historisées)

Parameter :

- int id
- string startTime : date de début de l'historique
- string endTime : date de fin de l'historique


== JSON Scenario API

=== scenario::all
Gibt eine Liste aller Szenarien zurück

=== scenario::byId
Gibt das genau angegebene Szenario zurück

Parameter :

- int id

=== scenario::changeState
Ändert den Zustand des angegebenen Szenarios.

Parameter :

- int id
- string state : [run,stop,enable,disable]

== API JSON datastore (variable)

=== datastore::byTypeLinkIdKey
Récupère la valeur d'une variable stockée dans le datastore

Parameter :

- string type : type de la valeur stockée (pour les scénarios c'est scenario)
- id linkId : -1 pour le global (valeur pour les scénarios par défaut, ou l'id du scénario)
- string key : Name des Wert

=== datastore::save
Enregistre la valeur d'une variable dans le datastore

Parameter :

- string type : type de la valeur stockée (pour les scénarios c'est scenario)
- id linkId : -1 pour le global (valeur pour les scénarios par défaut, ou l'id du scénario)
- string key : Name des Wert
- mixte value : valeur à enregistrer

== API JSON Message

=== message::all
Gibt eine Liste aller Nachrichten zurück

=== message::removeAll
Alle Nachrichten löschen

== API JSON Interaction

=== interact::tryToReply
Essaie de faire correspondre une demande avec une interaction, exécute l'action et répond en conséquence

Parameter :

- query (phrase de la demande)

== API JSON System

=== jeedom::halt
Permet d'arrêter Jeedom

=== jeedom::reboot
Ermöglicht Jeedom neu zu starten


== API JSON plugin

=== plugin::install
Installation/Mise à jour d'un plugin donné

Parameter :

- string plugin_id : nom du plugin (nom logique)

=== plugin::remove
Suppression d'un plugin donné

Parameter :

- string plugin_id : nom du plugin (nom logique)

== API JSON update

=== update::all
Gibt eine Liste aller installierten Komponenten, deren Versionen und die zugehörigen Informationen zurück

=== update::checkUpdate
Permet de vérifier les mises à jour

=== update::update
Erlaubt, Jeedom und aller Plugins zu aktualisieren

== API JSON Exemples
Voici un exemple d'utilisation de l'API. Pour l'exemple ci-dessous j'utilise https://github.com/jeedom/core/blob/stable/core/class/jsonrpcClient.class.php[cette class php] qui permet de simplifier l'utilisation de l'api.

Die Liste der Objekte abrufen :


[source,php]
$jsonrpc = new jsonrpcClient('#URL_JEEDOM#/core/api/jeeApi.php', #API_KEY#);
if($jsonrpc->sendRequest('object::all', array())){
    print_r($jsonrpc->getResult());
}else{
    echo $jsonrpc->getError();
}
 
Exécution d'une commande (avec comme option un titre et un message)


[source,php]
$jsonrpc = new jsonrpcClient('#URL_JEEDOM#/core/api/jeeApi.php', #API_KEY#);
if($jsonrpc->sendRequest('cmd::execCmd', array('id' => #cmd_id#, 'options' => array('title' => 'Coucou', 'message' => 'Ca marche')))){
    echo 'OK';
}else{
    echo $jsonrpc->getError();
}
 
L'API est bien sur utilisable avec d'autres langages (simplement un post sur une page) 